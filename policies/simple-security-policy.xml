<policies>
    <inbound>
        <!-- Save request details for Cortex -->
        <set-variable name="requestBody" value="@((context.Request?.Body?.As<string>(preserveContent: true)) ?? string.Empty)" />
        <set-variable name="requestHeaders" value="@(JsonConvert.SerializeObject(context.Request.Headers))" />
        
        <!-- Simple Attack Detection -->
        <set-variable name="isSuspicious" value="@{
            string url = context.Request.Url.ToString().ToLower();
            string body = context.Variables.GetValueOrDefault<string>("requestBody", "").ToLower();
            string content = url + " " + body;
            
            // Check for common attack patterns
            return content.Contains("' or ") || 
                   content.Contains("union select") || 
                   content.Contains("<script") || 
                   content.Contains("../") ||
                   content.Contains("exec(") ||
                   content.Contains("cmd.exe");
        }" />
        
        <!-- Block suspicious requests -->
        <choose>
            <when condition="@(context.Variables.GetValueOrDefault<bool>("isSuspicious", false))">
                <return-response>
                    <set-status code="403" reason="Forbidden" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>{"error": "Request blocked due to security policy"}</set-body>
                </return-response>
            </when>
        </choose>
        
        <!-- Rate Limiting - 100 requests per minute per IP -->
        <rate-limit-by-key calls="100" renewal-period="60" counter-key="@(context.Request.IpAddress)" />
        
        <!-- Add Security Headers -->
        <set-header name="X-Content-Type-Options" exists-action="override">
            <value>nosniff</value>
        </set-header>
        <set-header name="X-Frame-Options" exists-action="override">
            <value>DENY</value>
        </set-header>
    </inbound>
    
    <backend>
        <forward-request />
    </backend>
    
    <outbound>
        <!-- Remove Server Headers -->
        <set-header name="Server" exists-action="delete" />
        <set-header name="X-Powered-By" exists-action="delete" />
        
        <!-- Send to Cortex with security context -->
        <send-request mode="new" response-variable-name="mirrorMessage" ignore-error="true">
            <set-url>{{cortex-api-url}}</set-url>
            <set-method>POST</set-method>
            <set-header name="Content-Type" exists-action="override">
                <value>application/json</value>
            </set-header>
            <set-header name="Authorization" exists-action="override">
                <value>{{cortex-api-key}}</value>
            </set-header>
            <set-body>@{
                string requestBody = context.Variables.GetValueOrDefault<string>("requestBody");
                string responseBody = context.Response.Body.As<string>(preserveContent: true);
                int bodySizeLimit = 10000; // 10KB limit for simplicity
                bool requestBodyTooLarge = requestBody.Length > bodySizeLimit;
                bool responseBodyTooLarge = responseBody.Length > bodySizeLimit;

                return JsonConvert.SerializeObject(new {
                    accountId = "{{cloud-account-id}}",
                    serviceId = context.Deployment.ServiceId,
                    requestId = context.RequestId,
                    url = context.Request.OriginalUrl,
                    httpMethod = context.Request.Method,
                    requestBody = requestBodyTooLarge ? requestBody.Substring(0, bodySizeLimit) : requestBody,
                    requestBodyTruncated = requestBodyTooLarge,
                    requestHeaders = JsonConvert.DeserializeObject(context.Variables.GetValueOrDefault<string>("requestHeaders")),
                    timestamp = new DateTimeOffset(context.Timestamp).ToUnixTimeMilliseconds(),
                    requestIpAddress = context.Request.IpAddress,
                    statusCode = context.Response.StatusCode,
                    responseBody = responseBodyTooLarge ? responseBody.Substring(0, bodySizeLimit) : responseBody,
                    responseBodyTruncated = responseBodyTooLarge,
                    responseHeaders = context.Response.Headers,
                    region = context.Deployment.Region,
                    subscription = context.Subscription,
                    // Add security context
                    wasSuspicious = context.Variables.GetValueOrDefault<bool>("isSuspicious", false)
                });
            }</set-body>
        </send-request>
    </outbound>
    
    <on-error>
        <base />
    </on-error>
</policies> 