<policies>
    <inbound>
        <base />
        
        <!-- CORS Configuration -->
        <cors allow-credentials="false">
            <allowed-origins>
                <origin>*</origin>
            </allowed-origins>
            <allowed-methods>
                <method>GET</method>
                <method>POST</method>
                <method>PUT</method>
                <method>DELETE</method>
                <method>OPTIONS</method>
            </allowed-methods>
            <allowed-headers>
                <header>*</header>
            </allowed-headers>
        </cors>
        
        <!-- Log all incoming requests for observability -->
        <log-to-eventhub logger-id="security-logger" partition-id="0">@{
            return new JObject(
                new JProperty("timestamp", DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss")),
                new JProperty("request_id", context.RequestId),
                new JProperty("operation_id", context.Operation.Id),
                new JProperty("api_name", context.Api.Name),
                new JProperty("source_ip", context.Request.IpAddress),
                new JProperty("method", context.Request.Method),
                new JProperty("url", context.Request.Url.ToString()),
                new JProperty("user_agent", context.Request.Headers.GetValueOrDefault("User-Agent", "")),
                new JProperty("content_type", context.Request.Headers.GetValueOrDefault("Content-Type", "")),
                new JProperty("body_size", context.Request.Body?.As<string>(preserveContent: true)?.Length ?? 0)
            ).ToString();
        }</log-to-eventhub>
        
        <!-- Attack Detection Score System -->
        <set-variable name="attackScore" value="@{
            int score = 0;
            string url = context.Request.Url.ToString().ToLower();
            string body = context.Request.Body?.As<string>(preserveContent: true) ?? "";
            string allContent = (url + body).ToLower();
            string userAgent = context.Request.Headers.GetValueOrDefault("User-Agent", "").ToLower();
            
            // SQL Injection Detection (Score: 3-5 points each)
            if (allContent.Contains("' or") || allContent.Contains("'or")) score += 5;
            if (allContent.Contains("union select") || allContent.Contains("union all select")) score += 5;
            if (allContent.Contains("drop table") || allContent.Contains("drop database")) score += 5;
            if (allContent.Contains("exec(") || allContent.Contains("execute(")) score += 4;
            if (allContent.Contains("xp_cmdshell") || allContent.Contains("sp_executesql")) score += 5;
            if (allContent.Contains("waitfor delay") || allContent.Contains("benchmark(")) score += 4;
            if (allContent.Contains("--") && allContent.Contains("'")) score += 3;
            if (allContent.Contains("/*") && allContent.Contains("*/")) score += 3;
            
            // XSS Detection (Score: 3-4 points each)
            if (allContent.Contains("<script")) score += 4;
            if (allContent.Contains("javascript:")) score += 4;
            if (allContent.Contains("onerror=") || allContent.Contains("onload=")) score += 3;
            if (allContent.Contains("<iframe") || allContent.Contains("<object")) score += 3;
            if (allContent.Contains("document.cookie") || allContent.Contains("document.write")) score += 4;
            
            // Command Injection (Score: 4-5 points each)
            if (allContent.Contains("; cat ") || allContent.Contains("&& cat ")) score += 5;
            if (allContent.Contains("| nc ") || allContent.Contains("| netcat ")) score += 5;
            if (allContent.Contains("wget ") && allContent.Contains("http")) score += 4;
            if (allContent.Contains("curl ") && allContent.Contains("http")) score += 4;
            
            // Path Traversal (Score: 4 points each)
            if (allContent.Contains("../") || allContent.Contains("..\\")) score += 4;
            if (allContent.Contains("/etc/passwd") || allContent.Contains("\\windows\\system32")) score += 5;
            
            // Malicious User Agents (Score: 10 points)
            if (userAgent.Contains("sqlmap") || userAgent.Contains("nikto") || userAgent.Contains("nmap")) score += 10;
            if (userAgent.Contains("burp") || userAgent.Contains("zap") || userAgent.Contains("metasploit")) score += 8;
            
            return score;
        }" />
        
        <!-- Set Attack Type for Logging -->
        <set-variable name="attackType" value="@{
            string url = context.Request.Url.ToString().ToLower();
            string body = context.Request.Body?.As<string>(preserveContent: true) ?? "";
            string allContent = (url + body).ToLower();
            
            if (allContent.Contains("' or") || allContent.Contains("union select")) return "SQL_INJECTION";
            if (allContent.Contains("<script") || allContent.Contains("javascript:")) return "XSS";
            if (allContent.Contains("; cat ") || allContent.Contains("| nc ")) return "COMMAND_INJECTION";
            if (allContent.Contains("../") || allContent.Contains("/etc/passwd")) return "PATH_TRAVERSAL";
            if (context.Request.Headers.GetValueOrDefault("User-Agent", "").ToLower().Contains("sqlmap")) return "SCANNER_DETECTED";
            
            return "UNKNOWN";
        }" />
        
        <!-- Block High-Score Attacks -->
        <choose>
            <when condition="@(context.Variables.GetValueOrDefault<int>("attackScore") >= 5)">
                <!-- Log the blocked attack -->
                <log-to-eventhub logger-id="attack-logger" partition-id="1">@{
                    return new JObject(
                        new JProperty("event_type", "ATTACK_BLOCKED"),
                        new JProperty("timestamp", DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss")),
                        new JProperty("attack_type", context.Variables.GetValueOrDefault<string>("attackType")),
                        new JProperty("attack_score", context.Variables.GetValueOrDefault<int>("attackScore")),
                        new JProperty("source_ip", context.Request.IpAddress),
                        new JProperty("target_url", context.Request.Url.ToString()),
                        new JProperty("method", context.Request.Method),
                        new JProperty("user_agent", context.Request.Headers.GetValueOrDefault("User-Agent", "")),
                        new JProperty("payload", context.Request.Body?.As<string>(preserveContent: true) ?? "")
                    ).ToString();
                }</log-to-eventhub>
                
                <return-response>
                    <set-status code="403" reason="Forbidden" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>@{
                        return new JObject(
                            new JProperty("error", "Security violation detected"),
                            new JProperty("code", "ATTACK_BLOCKED"),
                            new JProperty("message", "Your request has been blocked due to suspicious activity"),
                            new JProperty("incident_id", context.RequestId)
                        ).ToString();
                    }</set-body>
                </return-response>
            </when>
        </choose>
        
        <!-- Rate Limiting Per IP -->
        <rate-limit-by-key calls="100" renewal-period="60" counter-key="@(context.Request.IpAddress)" />
        
        <!-- Request Size Limit (1MB) -->
        <choose>
            <when condition="@(context.Request.Body?.As<string>(preserveContent: true)?.Length > 1048576)">
                <return-response>
                    <set-status code="413" reason="Payload Too Large" />
                    <set-body>{"error": "Request body too large", "max_size": "1MB"}</set-body>
                </return-response>
            </when>
        </choose>
        
        <!-- Add Security Headers -->
        <set-header name="X-Content-Type-Options" exists-action="override">
            <value>nosniff</value>
        </set-header>
        <set-header name="X-Frame-Options" exists-action="override">
            <value>DENY</value>
        </set-header>
        <set-header name="X-XSS-Protection" exists-action="override">
            <value>1; mode=block</value>
        </set-header>
        <set-header name="Strict-Transport-Security" exists-action="override">
            <value>max-age=31536000; includeSubDomains</value>
        </set-header>
        
        <!-- Add Request ID for Tracing -->
        <set-header name="X-Request-ID" exists-action="override">
            <value>@(context.RequestId)</value>
        </set-header>
    </inbound>
    
    <backend>
        <base />
    </backend>
    
    <outbound>
        <base />
        
        <!-- Log Response for Complete Request Tracking -->
        <log-to-eventhub logger-id="security-logger" partition-id="2">@{
            return new JObject(
                new JProperty("timestamp", DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss")),
                new JProperty("request_id", context.RequestId),
                new JProperty("response_code", context.Response.StatusCode),
                new JProperty("response_time_ms", (DateTime.UtcNow - context.Timestamp).TotalMilliseconds),
                new JProperty("backend_time_ms", context.Elapsed.TotalMilliseconds),
                new JProperty("source_ip", context.Request.IpAddress),
                new JProperty("url", context.Request.Url.ToString())
            ).ToString();
        }</log-to-eventhub>
        
        <!-- Remove Server Information -->
        <set-header name="Server" exists-action="delete" />
        <set-header name="X-Powered-By" exists-action="delete" />
        <set-header name="X-AspNet-Version" exists-action="delete" />
        
        <!-- Add Security Headers to Response -->
        <set-header name="Content-Security-Policy" exists-action="override">
            <value>default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';</value>
        </set-header>
    </outbound>
    
    <on-error>
        <base />
        
        <!-- Log Errors for Monitoring -->
        <log-to-eventhub logger-id="error-logger" partition-id="3">@{
            return new JObject(
                new JProperty("timestamp", DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss")),
                new JProperty("request_id", context.RequestId),
                new JProperty("error_source", context.LastError.Source),
                new JProperty("error_reason", context.LastError.Reason),
                new JProperty("error_message", context.LastError.Message),
                new JProperty("source_ip", context.Request.IpAddress),
                new JProperty("url", context.Request.Url.ToString())
            ).ToString();
        }</log-to-eventhub>
        
        <!-- Return Generic Error to Avoid Information Disclosure -->
        <return-response>
            <set-status code="500" reason="Internal Server Error" />
            <set-header name="Content-Type" exists-action="override">
                <value>application/json</value>
            </set-header>
            <set-body>@{
                return new JObject(
                    new JProperty("error", "An error occurred processing your request"),
                    new JProperty("incident_id", context.RequestId)
                ).ToString();
            }</set-body>
        </return-response>
    </on-error>
</policies> 