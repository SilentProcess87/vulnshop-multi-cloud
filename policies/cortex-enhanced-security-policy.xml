<policies>
    <inbound>
        <!-- Save the request body and headers to be sent to Cortex. This should always be placed at the very beginning of the inbound element. -->
        <set-variable name="requestBody" value="@((context.Request?.Body?.As<string>(preserveContent: true)) ?? string.Empty)" />
        <set-variable name="requestHeaders" value="@(JsonConvert.SerializeObject(context.Request.Headers))" />
    </inbound>
    <backend>
        <forward-request />
    </backend>
    <outbound>
        <!-- Send data to Cortex. This should always be placed at the very end of the outbound element. -->
        <send-request mode="new" response-variable-name="mirrorMessage">
            <set-url>{{cortex-api-url}}</set-url>
            <set-method>POST</set-method>
            <set-header name="Content-Type" exists-action="override">
                <value>application/json</value>
            </set-header>
            <set-header name="Authorization" exists-action="override">
                <value>{{cortex-api-key}}</value>
            </set-header>
            <set-body>@{
                        string requestBody = context.Variables.GetValueOrDefault<string>("requestBody");
                        string responseBody = context.Response.Body.As<string>(preserveContent: true);
                        int bodySizeLimit = {{cortex-http-body-size-limit-bytes}};
                        bool requestBodySizeExceedsLimit = requestBody.Length > bodySizeLimit;
                        bool responseBodySizeExceedsLimit = responseBody.Length > bodySizeLimit;

                        return JsonConvert.SerializeObject(new {
                            accountId               = "{{cloud-account-id}}",
                            serviceId               = context.Deployment.ServiceId,
                            requestId               = context.RequestId,
                            url                     = context.Request.OriginalUrl,
                            httpMethod              = context.Request.Method,
                            requestBody             = requestBodySizeExceedsLimit ? requestBody.Substring(0, bodySizeLimit) : requestBody,
                            requestBodyTruncated    = requestBodySizeExceedsLimit,
                            requestHeaders          = JsonConvert.DeserializeObject(context.Variables.GetValueOrDefault<string>("requestHeaders")),
                            timestamp               = new DateTimeOffset(context.Timestamp).ToUnixTimeMilliseconds(),
                            requestIpAddress        = context.Request.IpAddress,
                            statusCode              = context.Response.StatusCode,
                            responseBody            = responseBodySizeExceedsLimit ? responseBody.Substring(0, bodySizeLimit) : responseBody,
                            responseBodyTruncated   = responseBodySizeExceedsLimit,
                            responseHeaders         = context.Response.Headers,
                            region                  = context.Deployment.Region,
                            subscription            = context.Subscription,
                        });
                    }</set-body>
        </send-request>
        <!-- End of sending data to Cortex -->
    </outbound>
    <on-error />
</policies>