#cloud-config
package_update: true
package_upgrade: true

packages:
  - nginx
  - nodejs
  - npm
  - git
  - curl
  - unzip

write_files:
  - path: /etc/nginx/sites-available/vulnshop
    content: |
      server {
          listen 80;
          server_name _;
          
          # Serve frontend
          location / {
              root /var/www/vulnshop/frontend/dist;
              try_files $uri $uri/ /index.html;
          }
          
          # Proxy API requests to backend
          location /api/ {
              proxy_pass http://localhost:3001/api/;
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_cache_bypass $http_upgrade;
          }
      }

  - path: /etc/systemd/system/vulnshop-backend.service
    content: |
      [Unit]
      Description=VulnShop Backend
      After=network.target
      
      [Service]
      Type=simple
      User=www-data
      WorkingDirectory=/var/www/vulnshop/backend
      Environment=NODE_ENV=production
      Environment=PORT=3001
      ExecStart=/usr/bin/node server.js
      Restart=on-failure
      RestartSec=10
      
      [Install]
      WantedBy=multi-user.target

runcmd:
  # Clone the repository
  - cd /var/www
  - git clone ${git_repo} vulnshop || (cd vulnshop && git pull)
  - cd vulnshop
  - git fetch --all
  - git reset --hard origin/${git_branch}
  - git pull origin ${git_branch}
  - chown -R www-data:www-data /var/www/vulnshop
  
  # Install backend dependencies
  - cd /var/www/vulnshop/backend
  - rm -f /var/www/vulnshop/backend/vulnshop.db
  - chmod -R 777 /var/www/vulnshop/backend
  - sudo -u www-data npm install
  
  # Install frontend dependencies and build
  - cd /var/www/vulnshop/frontend
  - sudo -u www-data npm install
  - sudo -u www-data npm run build
  
  # Setup Nginx
  - rm -f /etc/nginx/sites-enabled/default
  - ln -s /etc/nginx/sites-available/vulnshop /etc/nginx/sites-enabled/
  - nginx -t && systemctl reload nginx
  
  # Start backend service
  - systemctl daemon-reload
  - systemctl enable vulnshop-backend
  - systemctl restart vulnshop-backend
  
  # Enable and start services
  - systemctl enable nginx
  - systemctl restart nginx
  
  # Create a simple status endpoint
  - |
    cat > /var/www/vulnshop/status.html << 'EOF'
    <!DOCTYPE html>
    <html>
    <head>
        <title>VulnShop Status</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; }
            .status { padding: 20px; background: #f0f0f0; border-radius: 5px; }
            .success { background: #d4edda; border: 1px solid #c3e6cb; color: #155724; }
            .info { background: #d1ecf1; border: 1px solid #bee5eb; color: #0c5460; }
        </style>
    </head>
    <body>
        <h1>VulnShop Deployment Status</h1>
        <div class="status success">
            <h3>âœ… Application Deployed Successfully</h3>
            <p><strong>Platform:</strong> Azure with APIM</p>
            <p><strong>Frontend:</strong> <a href="/">Available at root</a></p>
            <p><strong>Backend API:</strong> <a href="/api/products">Available at /api/</a></p>
            <p><strong>Database:</strong> SQLite (local file)</p>
        </div>
        
        <div class="status info">
            <h3>ðŸ“‹ Application Information</h3>
            <p><strong>Default Admin:</strong> admin / admin123</p>
            <p><strong>Default User:</strong> testuser / user123</p>
            <p><strong>Purpose:</strong> Educational security testing</p>
            <p><strong>Vulnerabilities:</strong> 12 intentional security flaws</p>
        </div>
        
        <div class="status info">
            <h3>ðŸ”— Quick Links</h3>
            <ul>
                <li><a href="/">Frontend Application</a></li>
                <li><a href="/api/products">API - Products</a></li>
                <li><a href="/api/admin/users">API - Admin Users</a> (requires auth)</li>
            </ul>
        </div>
    </body>
    </html>
    EOF
  
  # Wait for services to be ready
  - sleep 30
  
  # Test the deployment
  - curl -f http://localhost/status.html || echo "Warning: Frontend not responding"
  - curl -f http://localhost:3001/api/products || echo "Warning: Backend not responding" 